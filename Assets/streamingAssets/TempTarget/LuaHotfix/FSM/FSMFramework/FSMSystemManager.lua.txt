--[[
    luaide  模板位置位于 Template/FunTemplate/NewFileTemplate.lua 其中 Template 为配置路径 与luaide.luaTemplatesDir
    luaide.luaTemplatesDir 配置 https://www.showdoc.cc/web/#/luaide?page_id=713062580213505
    author:{author}
    time:2021-11-13 15:08:50
]]
require ("LuaHotfix/FSM/FSMFramework/FSM_Enum")
require ("LuaHotfix/Global")

local Object = require ("LuaHotfix/Base/classic")

FSMSystemManager = Object:extend()


function FSMSystemManager:Intance()
    if self.m_Instance == nil then
        self.m_Instance = FSMSystemManager()
    end
    return self.m_Instance
end

function FSMSystemManager:new()
    self.m_Instance = nil
    self.m_StateDict = {}               -- <StateID, FSMState>
    self.m_CurrentStateID = FSMStateID.NullState
    self.m_CurrentState = nil
    print("This is FSMSystemManager new()")
    InitFSM()
end

-- 初始化状态
function InitFSM()

end

-- 更新npc的动作
function FSMSystemManager:Update(...)
    if self.m_CurrentStateID == FSMStateID.DownloadTerminate or m_CurrentStateID == FSMStateID.DownloadFinished then
        return
    end
    if self.m_CurrentState == nil then
        return
    end
    self.m_CurrentState:Act(...)
    self.m_CurrentState:Reason(...)
end

-- 添加新状态
function FSMSystemManager:AddState(state)
    if state == nil then
        Log.LogError("FSMState cannot be empty")
        return
    end
    if self.m_CurrentState == nil then          --如果是第一次添加
        self.m_CurrentState = state
        self.m_CurrentStateID = state.StateID
    end

    if ContainsKey(self.m_StateDict, state.StateID) then
        Log.LogError("State " ..state.StateID.." has already existed, no more add operation")
        return
    end
    table.insert(self.m_StateDict, state.StateID, state)
end

-- 删除状态
function FSMSystemManager:DeleteState(stateID)
    if (stateID == FSMStateID.NullState) then
        Log.LogError("Can not Delete NullState")
        return
    end 

    if ~ContainsKey(self.m_StateDict, stateID) then
        Log.LogError("Can not Delete state which is not exist")
        return
    end
    self.m_TransitionStateDict = RemoveByKey(self.m_StateDict, stateID)
end

-- 执行过渡条件满足时对应状态改做的事情
function FSMSystemManager:PerformTransition(transitionID)
    if transitionID == FSMTransition.NullTransition then
        Log.LogError("Can not execute empty transition")
        return
    end
    local stateID = self.m_CurrentState.GetOutputState(transitionID)
    if stateID == FSMStateID.NullState then
        Log.LogError("the current "..self.m_CurrentStateID.." cannot execute the transition event according to the transition"..transitionID)
        return
    end
    if ~ContainsKey(self.m_StateDict, stateID) then
        Log.LogError("this FSM dont have such state "..stateID.." ,cannot excute state transition")
        return
    end
    local state = self.m_StateDict[stateID]
    self.m_CurrentState:DoAfterLeave()
    self.m_CurrentState = state
    self.m_CurrentStateID = state:GetStateID()
    self.m_CurrentState:DoBeforeEnter()
end

-- 反注册
function FSMSystemManager:UnRegisterFSM()
    --RemoveTableData(self.m_StateDict)
    self.m_StateDict = {}
    self.m_CurrentState = nil
    self.m_CurrentStateID = FSMStateID.NullState
end